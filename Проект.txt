+import datetime as dt

FORMAT = '%H:%M:%S' 
WEIGHT = 75  # Вес
HEIGHT = 175  # Рост
K_1 = 0.035  # Коэффициент для подсчета калорий
K_2 = 0.029  # Коэффициент для подсчета калорий
STEP_M = 0.65  # Длина шага в метрах

storage_data = {} 


def check_correct_data(data):
    """Проверка корректности полученного пакета."""
    return (type(data) != int and len(data) == 2) and (data[0] != None and data[1] != None)


def check_correct_time(time):
    """Проверка корректности параметра времени."""
    return not (storage_data and time <= max(storage_data))


def get_step_day(steps):
    """Получить количество пройденных шагов за этот день."""
    return sum(storage_data.values()) + steps


def get_distance(steps):
    """Получить дистанцию пройденного пути в км."""
    return (steps * STEP_M) / 1000


def get_spent_calories(dist, current_time):
    """Получить значения потраченных калорий."""
    hour = float(current_time.hour)
    minute = float(current_time.minute)
    float_time = hour + minute / 60.0
    mean_speed = dist / float_time
    minutes = float_time * 60
    spent_calories = (K_1 * WEIGHT + (mean_speed ** 2 / HEIGHT) * K_2 * WEIGHT) * minutes
    return f'{spent_calories:.2f}'


def get_achievement(dist):
    """Получить поздравления за пройденную дистанцию."""
    if dist >= 6.5:
        return 'Отличный результат! Цель достигнута.'
    elif dist >= 3.9:
        return 'Неплохо! День был продуктивным.'
    elif dist >= 2:
        return 'Маловато, но завтра наверстаем!'
    else:
        return 'Лежать тоже полезно. Главное — участие, а не победа!'


def show_message(pack_time, day_steps, dist, calories, achievement):
    print(f'''
Время: {pack_time}.
Количество шагов за сегодня: {day_steps}.
Дистанция составила {dist:.2f} км.
Вы сожгли {calories} ккал.
{achievement}
''')


def accept_package(data):
    """Обработать пакет данных."""
    if not check_correct_data(data):  
        return 'Некорректный пакет'

    time, steps = data 

    pack_time = dt.datetime.strptime(time, FORMAT).time()  
    if not check_correct_time(pack_time):  
        return 'Некорректное значение времени'

    day_steps = get_step_day(steps) 
    dist = get_distance(day_steps) 
    calories = get_spent_calories(dist, pack_time)  
    achievement = get_achievement(dist)  
    show_message(pack_time, day_steps, dist, 
                 calories, achievement) 
    storage_data[pack_time] = day_steps  
    return storage_data 



package_0 = ('2:00:01', 505)
package_1 = (None, 3211)
package_2 = ('9:36:02', 15000)
package_3 = ('9:36:02', 9000)
package_4 = ('8:01:02', 7600)

accept_package(package_0)
accept_package(package_1)
accept_package(package_2)
accept_package(package_3)
accept_package(package_4)